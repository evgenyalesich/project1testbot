import os
import requests
import telebot
import logging
from bs4 import BeautifulSoup

token = os.getenv('TOKEN')
bot = telebot.TeleBot(token)


class WeatherForecast:
    def __init__(self):
        self.api_key = os.getenv('WEATHER_API')

    def get_weather(self, city, ):
        if not self.api_key:
            print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á OpenWeatherMap. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEATHER_API.")
            return

        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={self.api_key}&units=metric'
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            weather_description = data['weather'][0]['description']
            icon = data['weather'][0]['icon']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data.get("wind", {}).get("speed", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            icon_url = f"http://openweathermap.org/img/wn/{icon}.png"
            icon_data = requests.get(icon_url).content

            output = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"

            )
            return output, icon_data
        else:
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.', None

class NewsParser:
    def __init__(self, news_url):
        self.news_url = news_url

    def parse_news(self):
        try:
            response = requests.get(self.news_url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                news_list = []
                for news_item in soup.find_all('div', class_='news-item'):
                    title = news_item.find('h2').text.strip()
                    link = news_item.find('a')['href']
                    news_list.append({'title': title, 'link': link})
                return news_list
            else:
                print(f"Failed to retrieve news from {self.news_url}. Status code: {response.status_code}")
                return None
        except requests.RequestException as e:
            print(f"Error parsing news: {e}")
            return None

def process_selected_news(message, news_data):
    try:
        selected_index = int(message.text) - 1
        selected_news = news_data[selected_index]
        full_article = get_full_article(selected_news['link'])
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_news['title']}\n\n{full_article}")
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")

def get_full_article(link):
    try:
        
        pass
    except requests.RequestException as e:
        print(f"Error fetching full article: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é."

# Define a function to process the weather request
def process_weather_request(message, city):
    weather_forecast = WeatherForecast()
    weather_data, icon_data = weather_forecast.get_weather(city)
    if icon_data:
        bot.send_photo(message.chat.id, icon_data)
    bot.send_message(message.chat.id, weather_data)

# Define a function to process the currency request
def process_currency_request(message):
    logger = logging.getLogger(__name__)
    logger.info(f"Processing currency request for code: {message.text}")
    currency_code = message.text.upper()
    # Add your currency_service functionality here

# Define a function to process the news request
def process_news_request(message):
    logger = logging.getLogger(__name__)
    logger.info("Processing news request")
    # Add your news_service functionality here

# Define a handler for the command /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_weather = telebot.types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üå§Ô∏è')
    button_currency = telebot.types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç üí±')
    button_news = telebot.types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ –¥–Ω—è üì∞')
    button_order_bot = telebot.types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç ü§ñ')

    # Customize button colors
    button_weather. color = 'primary'
    button_currency.color = 'primary'
    button_news.color = 'primary'
    button_order_bot.color = 'positive'  # Different color for the order button

    keyboard.add(button_weather, button_currency, button_news, button_order_bot)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üå§Ô∏è")
def handle_weather_request(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    bot.register_next_step_handler(message, process_weather)

# Define a function to process the user's city input for weather request
def process_weather(message):
    city = message.text
    process_weather_request(message, city)

# Define a handler for the "–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç" button
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç üí±")
def handle_currency_request(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR):")
    bot.register_next_step_handler(message, process_currency_request)

# Define a handler for the "–ù–æ–≤–æ—Å—Ç–∏ –¥–Ω—è" button
@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤–æ—Å—Ç–∏ –¥–Ω—è üì∞")
def handle_news_request(message):
    process_news_request(message)

@bot.message_handler(func=lambda message: message.text == "–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç ü§ñ")
def handle_order_bot_button(message):
    bot.send_message(message.chat.id, "–î–ª—è –∑–∞–∫–∞–∑–∞ –±–æ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –∞–¥—Ä–µ—Å—É ")
# Define a handler for any other message
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

proxies = [
    '72.195.34.58 :4145',
    '187.102.238.49:999',
    
]

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ User-Agent
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36'
}

# URL-–∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞
url = 'https://charter97.org/ru/news/p/1/'

# –¶–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
for proxy in proxies:
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    proxy_dict = {
        'http': f'http://{proxy}',
        'https': f'https://{proxy}'
    }

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ User-Agent
        response = requests.get(url, proxies=proxy_dict, headers=headers)

       

    except requests.RequestException as e:
        
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏ {proxy}: {e}')

# Start polling
bot.polling()